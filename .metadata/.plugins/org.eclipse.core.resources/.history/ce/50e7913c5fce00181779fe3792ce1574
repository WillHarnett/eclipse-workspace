package com.babbelapps.babbleapps_mobileautomation;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.logging.LogEntries;
import org.openqa.selenium.*;

import org.openqa.selenium.remote.CapabilityType;
 
import org.openqa.selenium.remote.DesiredCapabilities;

import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.*;

import io.appium.java_client.android.AndroidElement;
import io.appium.java_client.remote.MobileCapabilityType;

import io.appium.java_client.ios.IOSElement;


public class AppiumiOSTest {

	GlobalVariables globalVariables = new GlobalVariables();
	CapabilitiesPrompt capabilitiesPrompt = new CapabilitiesPrompt();
	AppiumBasicFunctions appiumBasicFunctions = new AppiumBasicFunctions();

    private List<Integer> values; 

    private static final int MINIMUM = 0;  
    private static final int MAXIMUM = 10;  
    
    @Before  
    public void setUp() throws Exception {
    	capabilitiesPrompt.capabilitiesPrompt();
    	DesiredCapabilities capabilities = new DesiredCapabilities();
    	
    	String udid = "";
    	String deviceName = "";
    	
    	if(globalVariables.isEmulator) {
            capabilities.setCapability("app", globalVariables.appLocation); //Required
            udid = globalVariables.emulatorUdid;
            deviceName = globalVariables.emulatorDeviceName;
    	}
    	else {
    		capabilities.setCapability("bundleId", globalVariables.bubndleID);
    		udid = globalVariables.connectedDeviceUdid;
    		deviceName = globalVariables.connectedDeviceDeviceName;
    		//capabilities.setCapability("xcodeOrgId", globalVariables.teamID); //Required
    		//capabilities.setCapability("xcodeSigningId", globalVariables.signingID); //Required
    	} 
    	
    	capabilities.setCapability("platformName", globalVariables.platformName); //Required
    	capabilities.setCapability("automationName", globalVariables.automationName); //Required
    	capabilities.setCapability("deviceName", deviceName); //Required
        capabilities.setCapability("udid", udid); 

        WebDriver webDriver; 
        AndroidDriver androidDriver;
        IOSDriver iosDriver;
        

        	iosDriver = new IOSDriver( new URL( "http://127.0.0.1:4723/wd/hub" ), capabilities );

        
        iosDriver.findElementByAccessibilityId("Niku Jaga").click();
        
        values = new ArrayList<Integer>(); 
        
        Set<String> logTypes = iosDriver.manage().logs().getAvailableLogTypes();
        LogEntries logEntries = iosDriver.manage().logs().get("syslog");

        System.out.println(logTypes);
        System.out.println(logEntries);
        
        System.out.println("Finished Setup");
    }

    @After  
    public void tearDown() throws Exception {  
    	//driver.quit();  
    }  


    @Test  
    public void testScriptGoesHere() throws Exception {  

    	appiumBasicFunctions.tap("//XCUIElementTypeImage[@name=\"sampleRecipe_MisoSoup\"]");
    	//globalVariables.driver.findElement(By.xpath("//XCUIElementTypeImage[@name=\"sampleRecipe_MisoSoup\"]")).click();
        System.out.println("Test Output From Within the test");
        System.out.println("Here goes your test script");
    
    }
}
